[
  {
    "id": "problem-001",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.",
    "difficulty": "EASY",
    "tags": ["array", "hash-table"],
    "companyTags": ["Amazon", "Google", "Facebook"],
    "userId": "system",
    "examples": {
      "JAVA": {
        "input": "[2,7,11,15], target = 9",
        "output": "[0,1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      },
      "PYTHON": {
        "input": "[2,7,11,15], target = 9",
        "output": "[0,1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      },
      "JAVASCRIPT": {
        "input": "[2,7,11,15], target = 9",
        "output": "[0,1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      }
    },
    "constraints": "2 <= nums.length <= 10^4\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9\nOnly one valid answer exists.",
    "hints": ["Use a hash map to store complement values and their indices"],
    "editorial": "Use a hash map to store complement values and their indices. For each number, check if its complement (target - current number) exists in the hash map.",
    "testcases": [
      {"input": "2 7 11 15\n9", "output": "0 1"},
      {"input": "3 2 4\n6", "output": "1 2"},
      {"input": "3 3\n6", "output": "0 1"}
    ],
    "codeSnippets": {
      "JAVA": "import java.util.*;\nimport java.io.*;\n\npublic class Main {\n    public static int[] twoSum(int[] nums, int target) {\n        // Write your code here\n        return new int[0];\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] numsStr = br.readLine().split(\" \");\n        int[] nums = new int[numsStr.length];\n        for (int i = 0; i < numsStr.length; i++) {\n            nums[i] = Integer.parseInt(numsStr[i]);\n        }\n        int target = Integer.parseInt(br.readLine());\n        int[] result = twoSum(nums, target);\n        System.out.println(result[0] + \" \" + result[1]);\n    }\n}",
      "PYTHON": "def two_sum(nums, target):\n    # Write your code here\n    pass\n\nnums = list(map(int, input().split()))\ntarget = int(input())\nresult = two_sum(nums, target)\nprint(result[0], result[1])",
      "JAVASCRIPT": "const fs = require('fs');\n\nfunction twoSum(nums, target) {\n    // Write your code here\n    return [];\n}\n\nconst input = fs.readFileSync(0, 'utf-8').trim().split('\\n');\nconst nums = input[0].split(' ').map(Number);\nconst target = parseInt(input[1]);\nconst result = twoSum(nums, target);\nconsole.log(result[0] + ' ' + result[1]);"
    },
    "referenceSolutions": {
      "JAVA": "import java.util.*;\nimport java.io.*;\n\npublic class Main {\n    public static int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[]{map.get(complement), i};\n            }\n            map.put(nums[i], i);\n        }\n        return new int[0];\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] numsStr = br.readLine().split(\" \");\n        int[] nums = new int[numsStr.length];\n        for (int i = 0; i < numsStr.length; i++) {\n            nums[i] = Integer.parseInt(numsStr[i]);\n        }\n        int target = Integer.parseInt(br.readLine());\n        int[] result = twoSum(nums, target);\n        System.out.println(result[0] + \" \" + result[1]);\n    }\n}",
      "PYTHON": "def two_sum(nums, target):\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []\n\nnums = list(map(int, input().split()))\ntarget = int(input())\nresult = two_sum(nums, target)\nprint(result[0], result[1])",
      "JAVASCRIPT": "const fs = require('fs');\n\nfunction twoSum(nums, target) {\n    const map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (map.has(complement)) {\n            return [map.get(complement), i];\n        }\n        map.set(nums[i], i);\n    }\n    return [];\n}\n\nconst input = fs.readFileSync(0, 'utf-8').trim().split('\\n');\nconst nums = input[0].split(' ').map(Number);\nconst target = parseInt(input[1]);\nconst result = twoSum(nums, target);\nconsole.log(result[0] + ' ' + result[1]);"
    },
    "createdAt": "2024-01-01T00:00:00.000Z",
    "updatedAt": "2024-01-01T00:00:00.000Z",
    "solvedBy": []
  },
  {
    "id": "problem-002",
    "title": "Valid Parentheses",
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.",
    "difficulty": "EASY",
    "tags": ["string", "stack"],
    "companyTags": ["Amazon", "Microsoft", "Google"],
    "userId": "system",
    "examples": {
      "JAVA": {
        "input": "\"()\"",
        "output": "true",
        "explanation": "The string contains valid parentheses."
      },
      "PYTHON": {
        "input": "\"()\"",
        "output": "true",
        "explanation": "The string contains valid parentheses."
      },
      "JAVASCRIPT": {
        "input": "\"()\"",
        "output": "true",
        "explanation": "The string contains valid parentheses."
      }
    },
    "constraints": "1 <= s.length <= 10^4\ns consists of parentheses only '()[]{}'.",
    "hints": ["Use a stack data structure", "When you encounter an opening bracket, push it to the stack"],
    "editorial": "Use a stack to keep track of opening brackets. For each closing bracket, check if it matches the most recently opened bracket.",
    "testcases": [
      {"input": "()", "output": "true"},
      {"input": "()[]{}",  "output": "true"},
      {"input": "(]", "output": "false"}
    ],
    "codeSnippets": {
      "JAVA": "import java.util.*;\nimport java.io.*;\n\npublic class Main {\n    public static boolean isValid(String s) {\n        // Write your code here\n        return false;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String s = br.readLine();\n        System.out.println(isValid(s));\n    }\n}",
      "PYTHON": "def is_valid(s):\n    # Write your code here\n    return False\n\ns = input().strip()\nprint('true' if is_valid(s) else 'false')",
      "JAVASCRIPT": "const fs = require('fs');\n\nfunction isValid(s) {\n    // Write your code here\n    return false;\n}\n\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconsole.log(isValid(input) ? 'true' : 'false');"
    },
    "referenceSolutions": {
      "JAVA": "import java.util.*;\nimport java.io.*;\n\npublic class Main {\n    public static boolean isValid(String s) {\n        Stack<Character> stack = new Stack<>();\n        Map<Character, Character> map = new HashMap<>();\n        map.put(')', '(');\n        map.put('}', '{');\n        map.put(']', '[');\n        \n        for (char c : s.toCharArray()) {\n            if (map.containsKey(c)) {\n                if (stack.isEmpty() || stack.pop() != map.get(c)) {\n                    return false;\n                }\n            } else {\n                stack.push(c);\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String s = br.readLine();\n        System.out.println(isValid(s));\n    }\n}",
      "PYTHON": "def is_valid(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in s:\n        if char in mapping:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:\n            stack.append(char)\n    return not stack\n\ns = input().strip()\nprint('true' if is_valid(s) else 'false')",
      "JAVASCRIPT": "const fs = require('fs');\n\nfunction isValid(s) {\n    const stack = [];\n    const mapping = { ')': '(', '}': '{', ']': '[' };\n    \n    for (let char of s) {\n        if (char in mapping) {\n            if (stack.length === 0 || stack.pop() !== mapping[char]) {\n                return false;\n            }\n        } else {\n            stack.push(char);\n        }\n    }\n    return stack.length === 0;\n}\n\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconsole.log(isValid(input) ? 'true' : 'false');"
    },
    "createdAt": "2024-01-01T00:00:00.000Z",
    "updatedAt": "2024-01-01T00:00:00.000Z",
    "solvedBy": []
  },
  {
    "id": "problem-003",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\n\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "difficulty": "EASY",
    "tags": ["array", "dynamic-programming"],
    "companyTags": ["Amazon", "Google", "Facebook"],
    "userId": "system",
    "examples": {
      "JAVA": {
        "input": "[7,1,5,3,6,4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5."
      },
      "PYTHON": {
        "input": "[7,1,5,3,6,4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5."
      },
      "JAVASCRIPT": {
        "input": "[7,1,5,3,6,4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5."
      }
    },
    "constraints": "1 <= prices.length <= 10^5\n0 <= prices[i] <= 10^4",
    "hints": ["Keep track of the minimum price seen so far", "For each price, calculate the profit if we sell at that price"],
    "editorial": "Use a single pass approach. Keep track of the minimum price seen so far and the maximum profit achievable.",
    "testcases": [
      {"input": "7 1 5 3 6 4", "output": "5"},
      {"input": "7 6 4 3 1", "output": "0"},
      {"input": "1 2", "output": "1"}
    ],
    "codeSnippets": {
      "JAVA": "import java.util.*;\nimport java.io.*;\n\npublic class Main {\n    public static int maxProfit(int[] prices) {\n        // Write your code here\n        return 0;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] input = br.readLine().split(\" \");\n        int[] prices = new int[input.length];\n        for (int i = 0; i < input.length; i++) {\n            prices[i] = Integer.parseInt(input[i]);\n        }\n        System.out.println(maxProfit(prices));\n    }\n}",
      "PYTHON": "def max_profit(prices):\n    # Write your code here\n    return 0\n\nprices = list(map(int, input().split()))\nprint(max_profit(prices))",
      "JAVASCRIPT": "const fs = require('fs');\n\nfunction maxProfit(prices) {\n    // Write your code here\n    return 0;\n}\n\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst prices = input.split(' ').map(Number);\nconsole.log(maxProfit(prices));"
    },
    "referenceSolutions": {
      "JAVA": "import java.util.*;\nimport java.io.*;\n\npublic class Main {\n    public static int maxProfit(int[] prices) {\n        if (prices.length == 0) return 0;\n        \n        int minPrice = prices[0];\n        int maxProfit = 0;\n        \n        for (int i = 1; i < prices.length; i++) {\n            if (prices[i] < minPrice) {\n                minPrice = prices[i];\n            } else {\n                maxProfit = Math.max(maxProfit, prices[i] - minPrice);\n            }\n        }\n        \n        return maxProfit;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] input = br.readLine().split(\" \");\n        int[] prices = new int[input.length];\n        for (int i = 0; i < input.length; i++) {\n            prices[i] = Integer.parseInt(input[i]);\n        }\n        System.out.println(maxProfit(prices));\n    }\n}",
      "PYTHON": "def max_profit(prices):\n    if not prices:\n        return 0\n    \n    min_price = prices[0]\n    max_profit = 0\n    \n    for price in prices[1:]:\n        if price < min_price:\n            min_price = price\n        else:\n            max_profit = max(max_profit, price - min_price)\n    \n    return max_profit\n\nprices = list(map(int, input().split()))\nprint(max_profit(prices))",
      "JAVASCRIPT": "const fs = require('fs');\n\nfunction maxProfit(prices) {\n    if (prices.length === 0) return 0;\n    \n    let minPrice = prices[0];\n    let maxProfit = 0;\n    \n    for (let i = 1; i < prices.length; i++) {\n        if (prices[i] < minPrice) {\n            minPrice = prices[i];\n        } else {\n            maxProfit = Math.max(maxProfit, prices[i] - minPrice);\n        }\n    }\n    \n    return maxProfit;\n}\n\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst prices = input.split(' ').map(Number);\nconsole.log(maxProfit(prices));"
    },
    "createdAt": "2024-01-01T00:00:00.000Z",
    "updatedAt": "2024-01-01T00:00:00.000Z",
    "solvedBy": []
  }
]
