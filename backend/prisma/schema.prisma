// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String    @unique
  image          String?
  role           Role      @default(USER)
  password       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastLogin      DateTime?
  streakCount    Int       @default(0)
  maxStreakCount Int       @default(0)
  
  // Firebase integration fields
  firebaseUid  String? @unique
  authProvider String? // 'google.com', 'github.com', etc.

  problems        Problem[]
  submissions     Submission[]
  solvedProblems  ProblemSolved[]
  Playlists       Playlist[]
  discussions     Discussion[]
  discussionLikes DiscussionLike[]

  Revision        Revision[]
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[]
  companyTags String[]
  userId      String
  examples    Json
  constraints String
  hints       String?
  editorial   String?

  testcases          Json
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission       Submission[]
  solvedBy         ProblemSolved[]
  problemsPlaylist ProblemPlaylist[]
  discussions      Discussion[]

  Revision         Revision[]
}

model Submission {
  id        String   @id @default(uuid())
  code      String
  language  String
  status    String
  runtime   Float?
  memory    Float?
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  solvedAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model Playlist {
  id          String   @id @default(uuid())
  title       String
  description String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemsPlaylist ProblemPlaylist[]
}

model ProblemPlaylist {
  id         String   @id @default(uuid())
  problemId  String
  playlistId String
  createdAt  DateTime @default(now())

  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
}

model Discussion {
  id        String   @id @default(uuid())
  title     String
  content   String
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  likes DiscussionLike[]
}

model DiscussionLike {
  id           String   @id @default(uuid())
  userId       String
  discussionId String
  createdAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  discussion Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
}

model Revision {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}